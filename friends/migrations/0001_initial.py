# Generated by Django 4.2.3 on 2023-08-20 08:18

import django.contrib.auth.models
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Ids',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=255)),
                ('email', models.CharField(max_length=255, unique=True)),
                ('password', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='FriendRequests',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_from', models.IntegerField()),
                ('request_to', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Friends',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('self_id', models.IntegerField(blank=True, null=True)),
                ('pika', models.IntegerField(null=True)),
                ('friend_id', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Posts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('self_id', models.IntegerField(blank=True, null=True)),
                ('quote', models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('user_name', models.CharField(max_length=50)),
                ('about', models.TextField()),
                ('myId', models.IntegerField(primary_key=True, serialize=False)),
                ('digit', models.IntegerField(default=0)),
                ('city', models.CharField(default='city not set', max_length=100)),
                ('college', models.CharField(default='college not provided', max_length=100)),
                ('rltn', models.CharField(default='relationship status hidden', max_length=25)),
            ],
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.CheckConstraint(check=models.Q(('myId', models.F('digit'))), name='equal_value'),
        ),
        migrations.AlterUniqueTogether(
            name='user',
            unique_together={('user_name', 'myId', 'digit')},
        ),
        migrations.AddConstraint(
            model_name='friends',
            constraint=models.CheckConstraint(check=models.Q(('self_id', models.F('friend_id')), _negated=True), name='not_equal_value'),
        ),
        migrations.AlterUniqueTogether(
            name='friends',
            unique_together={('self_id', 'friend_id')},
        ),
        migrations.AddConstraint(
            model_name='friendrequests',
            constraint=models.CheckConstraint(check=models.Q(('request_from', models.F('request_to')), _negated=True), name='not_equal_values'),
        ),
        migrations.AlterUniqueTogether(
            name='friendrequests',
            unique_together={('request_from', 'request_to')},
        ),
        migrations.AddField(
            model_name='ids',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='ids',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
